{"version":3,"sources":["context/EffectsContext.js","context/SudokuContext.js","Constant.js","components/Start.js","App.js","reportWebVitals.js","index.js"],"names":["EffectContext","React","createContext","useShow","useContext","EffectProvider","timer","children","ms","document","querySelectorAll","s","m","selectCell","indexR","indexC","getElementById","run","watchCell","textContent","value","hoverBg","prev","i","cellR","cellC","prevR","row","prevC","col","classList","remove","add","checkErr","box_row","box_col","addErr","cell","innerHTML","contains","CONSTANT","BOX_SIZE","cellB","console","log","removeErr","watch","handlePause","clearInterval","handleStart","setInterval","Provider","SudokuContext","useSudoku","SudokuProvider","useState","sudoku","setSudoku","puzzel","setPuzzel","question","setQuestion","name","setName","levelInx","setlevelinx","isSafe","grid","GRID_SIZE","isColSafe","isRowSafe","isBoxSafe","UNASSIGNED","findUnassignedPos","pos","isFullGrid","every","j","sudokuCreate","unassigned_pos","number_list","arr","curr_index","length","rand_index","Math","floor","random","temp","shuffleArray","NUMBERS","forEach","num","rand","sudokuGen","level","check","sucopy","slice","res","attemps","removeCells","qcopy","ispuzzelcom","LEVEL_NAME","LEVEL","ROUTE","BOARD","START","ROOT","Start","history","useHistory","className","Form","Group","controlId","Label","style","letterSpacing","Control","onInput","e","target","type","htmlFor","visuallyHidden","Select","onChange","id","Button","onClick","preventDefault","push","variant","Board","lazy","App","fallback","path","component","from","to","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.f2169439.chunk.js","sourcesContent":["import React, { useContext, useState } from 'react'\r\nimport { CONSTANT } from '../Constant';\r\n\r\nconst EffectContext = React.createContext()\r\n\r\nexport function useShow() {\r\n    return useContext(EffectContext)\r\n}\r\nexport default function EffectProvider({ children }) {\r\n    let cells = document.querySelectorAll('.board__cell')\r\n    // let watchCell = document.getElementById('watch')\r\n    let ms = 0, s = 0, m = 0\r\n    // const [m, setm] = useState(0)\r\n    // const [s, sets] = useState(0)\r\n    let timer, watch\r\n\r\n    const selectCell = (indexR, indexC) => {\r\n        return document.getElementById(`cell-${indexR}-${indexC}`)\r\n    }\r\n\r\n    const hoverBg = (indexR, indexC, prev) => {\r\n        for (let i = 0; i < 9; i++) {\r\n            const cellR = selectCell(indexR, i)\r\n            const cellC = selectCell(i, indexC)\r\n            if (prev) {\r\n                const prevR = selectCell(prev.row, i)\r\n                const prevC = selectCell(i, prev.col)\r\n                prevR.classList.remove('hover')\r\n                prevC.classList.remove('hover')\r\n            }\r\n            cellR.classList.add('hover')\r\n            cellC.classList.add('hover')\r\n        }\r\n    }\r\n\r\n    const checkErr = (indexR, indexC, value) => {\r\n        let box_row = indexR - indexR % 3, box_col = indexC - indexC % 3\r\n        const addErr = (cell) => {\r\n            if (cell.innerHTML == value) {\r\n                cell.classList.add('err')\r\n            }\r\n        }\r\n        for (let i = 0; i < 9; i++) {\r\n            const cellR = selectCell(indexR, i)\r\n            const cellC = selectCell(i, indexC)\r\n            if (!cellR.classList.contains('selected')) addErr(cellR)\r\n            if (!cellC.classList.contains('selected')) addErr(cellC)\r\n        }\r\n        for (let row = 0; row < CONSTANT.BOX_SIZE; row++) {\r\n            for (let col = 0; col < CONSTANT.BOX_SIZE; col++) {\r\n                const cellB = selectCell(row + box_row, col + box_col)\r\n                console.log(row + box_row, col + box_col, cellB.innerHTML, value)\r\n                if (cellB.innerHTML == value) {\r\n                    cellB.classList.add('err')\r\n                };\r\n            }\r\n        }\r\n    }\r\n    const removeErr = ({ row: indexR, col: indexC }) => {\r\n        let box_row = indexR - indexR % 3, box_col = indexC - indexC % 3\r\n        for (let i = 0; i < 9; i++) {\r\n            const cellR = selectCell(indexR, i)\r\n            const cellC = selectCell(i, indexC)\r\n            const cell = selectCell(indexR, indexC)\r\n            if (cellR.classList.contains('err') || cellC.classList.contains('err')) {\r\n                cellR.classList.remove('err')\r\n                cellC.classList.remove('err')\r\n            }\r\n            for (let row = 0; row < CONSTANT.BOX_SIZE; row++) {\r\n                for (let col = 0; col < CONSTANT.BOX_SIZE; col++) {\r\n                    const cellB = selectCell(row + box_row, col + box_col)\r\n                    if (cellB.classList.contains('err')) {\r\n                        cellB.classList.remove('err')\r\n                    };\r\n                }\r\n            }\r\n        }\r\n        return false\r\n    }\r\n    const handleStart = () => {\r\n        if (!timer) {\r\n            timer = setInterval(run, 10)\r\n        }\r\n    }\r\n    function run() {\r\n        let watchCell = document.getElementById('watch')\r\n        if (watchCell) {\r\n            watchCell.textContent = (m < 10 ? \"0\" + m : m) + \":\" + (s < 10 ? \"0\" + s : s) + \":\" + (ms < 10 ? \"0\" + ms : ms)\r\n            ms++\r\n            if (ms === 100) {\r\n                ms = 0\r\n                // sets(prev => prev + 1)\r\n                s++\r\n            }\r\n            if (s === 60) {\r\n                s = 0\r\n                m++;\r\n                // setm(prev => prev + 1)\r\n            }\r\n        }\r\n    }\r\n    const handlePause = () => {\r\n        clearInterval(timer)\r\n        timer = false\r\n    }\r\n\r\n    const value = {\r\n        hoverBg,\r\n        checkErr,\r\n        removeErr,\r\n        ms, s, m,\r\n        timer, watch,\r\n        handlePause,\r\n        handleStart\r\n    }\r\n    return (\r\n        <EffectContext.Provider value={value}>\r\n            {children}\r\n        </EffectContext.Provider>\r\n    )\r\n}\r\n","import React, { useContext, useState } from 'react'\r\nimport { CONSTANT } from '../Constant';\r\n\r\nconst SudokuContext = React.createContext()\r\n\r\nexport function useSudoku() {\r\n    return useContext(SudokuContext)\r\n}\r\nexport default function SudokuProvider({ children }) {\r\n    const [sudoku, setSudoku] = useState([\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n        [0, 0, 0, 0, 0, 0, 0, 0, 0],\r\n    ])\r\n    const [puzzel, setPuzzel] = useState()\r\n    const [question, setQuestion] = useState()\r\n    const [name, setName] = useState(\"user\")\r\n    const [levelInx, setlevelinx] = useState(0)\r\n\r\n    const newGrid = (size) => {\r\n        let arr = new Array(size);\r\n\r\n        for (let i = 0; i < size; i++) {\r\n            arr[i] = new Array(size);\r\n        }\r\n\r\n        for (let i = 0; i < Math.pow(size, 2); i++) {\r\n            arr[Math.floor(i / size)][i % size] = CONSTANT.UNASSIGNED;\r\n        }\r\n        return arr;\r\n    }\r\n\r\n    // check duplicate number in col\r\n    const isColSafe = (grid, col, value) => {\r\n        for (let row = 0; row < CONSTANT.GRID_SIZE; row++) {\r\n            if (grid[row][col] === value) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // check duplicate number in row\r\n    const isRowSafe = (grid, row, value) => {\r\n        for (let col = 0; col < CONSTANT.GRID_SIZE; col++) {\r\n            if (grid[row][col] === value) return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // check duplicate number in 3x3 box\r\n    const isBoxSafe = (grid, box_row, box_col, value) => {\r\n        for (let row = 0; row < CONSTANT.BOX_SIZE; row++) {\r\n            for (let col = 0; col < CONSTANT.BOX_SIZE; col++) {\r\n                if (grid[row + box_row][col + box_col] === value) return false;\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n\r\n    // check in row, col and 3x3 box\r\n    const isSafe = (grid, row, col, value) => {\r\n        return isColSafe(grid, col, value) && isRowSafe(grid, row, value) && isBoxSafe(grid, row - row % 3, col - col % 3, value) && value !== CONSTANT.UNASSIGNED;\r\n    }\r\n\r\n    // find unassigned cell\r\n    const findUnassignedPos = (grid, pos) => {\r\n        for (let row = 0; row < CONSTANT.GRID_SIZE; row++) {\r\n            for (let col = 0; col < CONSTANT.GRID_SIZE; col++) {\r\n                if (grid[row][col] === CONSTANT.UNASSIGNED) {\r\n                    pos.row = row;\r\n                    pos.col = col;\r\n                    return true;\r\n                }\r\n            }\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const ispuzzelcom = () => {\r\n        for (let row = 0; row < CONSTANT.GRID_SIZE; row++) {\r\n            for (let col = 0; col < CONSTANT.GRID_SIZE; col++) {\r\n                if (puzzel[row][col] === CONSTANT.UNASSIGNED) {\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n        return true;\r\n    }\r\n    // shuffle arr\r\n    const shuffleArray = (arr) => {\r\n        let curr_index = arr.length;\r\n\r\n        while (curr_index !== 0) {\r\n            let rand_index = Math.floor(Math.random() * curr_index);\r\n            curr_index -= 1;\r\n\r\n            let temp = arr[curr_index];\r\n            arr[curr_index] = arr[rand_index];\r\n            arr[rand_index] = temp;\r\n        }\r\n\r\n        return arr;\r\n    }\r\n\r\n    // check puzzle is complete\r\n    const isFullGrid = (grid) => {\r\n        return grid.every((row, i) => {\r\n            return row.every((value, j) => {\r\n                return value !== CONSTANT.UNASSIGNED;\r\n            });\r\n        });\r\n    }\r\n\r\n    const sudokuCreate = (grid) => {\r\n        let unassigned_pos = {\r\n            row: -1,\r\n            col: -1\r\n        }\r\n\r\n        if (!findUnassignedPos(grid, unassigned_pos)) return true;\r\n\r\n        let number_list = shuffleArray([...CONSTANT.NUMBERS]);\r\n\r\n        let row = unassigned_pos.row;\r\n        let col = unassigned_pos.col;\r\n\r\n        number_list.forEach((num, i) => {\r\n            if (isSafe(grid, row, col, num)) {\r\n                grid[row][col] = num;\r\n\r\n                if (isFullGrid(grid)) {\r\n                    return true;\r\n                } else {\r\n                    if (sudokuCreate(grid)) {\r\n                        return true;\r\n                    }\r\n                }\r\n\r\n                grid[row][col] = CONSTANT.UNASSIGNED;\r\n            }\r\n        });\r\n\r\n        return isFullGrid(grid);\r\n    }\r\n\r\n    const sudokuCheck = (grid) => {\r\n        let unassigned_pos = {\r\n            row: -1,\r\n            col: -1\r\n        }\r\n\r\n        if (!findUnassignedPos(grid, unassigned_pos)) return true;\r\n\r\n        grid.forEach((row, i) => {\r\n            row.forEach((num, j) => {\r\n                if (isSafe(grid, i, j, num)) {\r\n                    if (isFullGrid(grid)) {\r\n                        return true;\r\n                    } else {\r\n                        if (sudokuCreate(grid)) {\r\n                            return true;\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        })\r\n\r\n        return isFullGrid(grid);\r\n    }\r\n\r\n    const rand = () => Math.floor(Math.random() * CONSTANT.GRID_SIZE);\r\n\r\n    const removeCells = (grid, level) => {\r\n        let res = grid;\r\n\r\n        let attemps = level;\r\n        while (attemps > 0) {\r\n            let row = rand();\r\n            let col = rand();\r\n            while (res[row][col] === 0) {\r\n                row = rand();\r\n                col = rand();\r\n            }\r\n            res[row][col] = CONSTANT.UNASSIGNED;\r\n            attemps--;\r\n        }\r\n        setPuzzel(res)\r\n        return res;\r\n    }\r\n\r\n    // generate sudoku base on level\r\n    const sudokuGen = (level) => {\r\n\r\n        let check = sudokuCreate(sudoku);\r\n        let sucopy = []\r\n        for (let i = 0; i < sudoku.length; i++) {\r\n            sucopy[i] = sudoku[i].slice()\r\n        }\r\n        if (check) {\r\n            let question = removeCells(sucopy, level);\r\n            let qcopy = []\r\n            for (let i = 0; i < question.length; i++) {\r\n                qcopy[i] = question[i].slice()\r\n            }\r\n            setQuestion(qcopy)\r\n        }\r\n    }\r\n\r\n    // console.log(puzzel, sudoku, question);\r\n    const value = {\r\n        sudokuCreate,\r\n        sudokuGen,\r\n        sudoku,\r\n        setSudoku,\r\n        name,\r\n        setName,\r\n        levelInx,\r\n        setlevelinx,\r\n        puzzel,\r\n        setPuzzel,\r\n        question,\r\n        ispuzzelcom\r\n    }\r\n    return (\r\n        <SudokuContext.Provider value={value}>\r\n            {children}\r\n        </SudokuContext.Provider>\r\n    )\r\n}\r\n","export const CONSTANT = {\r\n    UNASSIGNED: 0,\r\n    GRID_SIZE: 9,\r\n    BOX_SIZE: 3,\r\n    NUMBERS: [1, 2, 3, 4, 5, 6, 7, 8, 9],\r\n    LEVEL_NAME: [\r\n        'Easy',\r\n        'Medium',\r\n        'Hard'\r\n    ],\r\n    LEVEL: [20, 47, 65]\r\n}\r\nexport const ROUTE = {\r\n    BOARD: \"/board\",\r\n    START: '/start',\r\n    ROOT: '/'\r\n}","import React, { useState } from 'react'\r\nimport { Container, Form, Button } from 'react-bootstrap'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { CONSTANT, ROUTE } from '../Constant'\r\nimport { useShow } from '../context/EffectsContext'\r\nimport { useSudoku } from '../context/SudokuContext'\r\n\r\nexport default function Start() {\r\n    const { sudokuGen, setSudoku, setName, setlevelinx, levelInx } = useSudoku()\r\n    const history = useHistory()\r\n    const { handleStart } = useShow()\r\n\r\n    const handleSubmit = (e) => {\r\n        e.preventDefault()\r\n        const level = CONSTANT.LEVEL[levelInx]\r\n        sudokuGen(level)\r\n        handleStart()\r\n        history.push(ROUTE.BOARD)\r\n    }\r\n\r\n    return (\r\n        <div className=\"start\">\r\n            <Form className=\"start__form\" >\r\n                <Form.Group className=\"mb-3\" controlId=\"formBasicPassword\">\r\n                    <Form.Label className=\"fw-bold text-uppercase\" style={{ letterSpacing: \"3px\" }}>Name</Form.Label>\r\n                    <Form.Control onInput={(e) => setName(e.target.value)} className=\"border border-dark border-3\" type=\"text\" />\r\n                </Form.Group>\r\n                <Form.Group className=\"mb-3\" >\r\n                    <Form.Label className=\"me-sm-2\" htmlFor=\"inlineFormCustomSelect\" visuallyHidden>\r\n                        Preference\r\n                    </Form.Label>\r\n                    <Form.Select onChange={(e) => setlevelinx(e.target.value)} className=\"border border-dark border-3 fw-bold me-sm-2\" id=\"inlineFormCustomSelect\">\r\n                        <option value=\"0\">Easy</option>\r\n                        <option value=\"1\">Medium</option>\r\n                        <option value=\"2\">Hard</option>\r\n                    </Form.Select>\r\n                </Form.Group>\r\n                <div className=\"d-grid\">\r\n                    <Button onClick={handleSubmit} className=\"text-uppercase fw-bold\" variant=\"dark\" type=\"submit\">\r\n                        Start\r\n                    </Button>\r\n                </div>\r\n            </Form>\r\n        </div >\r\n    )\r\n}\r\n","import { lazy, Suspense  } from 'react';\nimport { BrowserRouter, Route, Switch, Redirect } from 'react-router-dom';\nimport Start from './components/Start';\nimport { ROUTE } from './Constant';\nimport EffectProvider from './context/EffectsContext';\nimport SudokuProvider from './context/SudokuContext';\nconst Board = lazy(() => import('./components/Board'));\n\nfunction App() {\n  return (\n    <div className=\"main\">\n      <SudokuProvider>\n        <EffectProvider>\n        <BrowserRouter>\n        <Switch>\n        <Suspense fallback={<div />}>\n          <Route path={ROUTE.BOARD} component={Board} />\n          <Route path={ROUTE.START} component={Start} />\n          <Redirect from={ROUTE.ROOT} to={ROUTE.START} />\n          </Suspense>\n          </Switch>\n        </BrowserRouter>\n        </EffectProvider>\n      </SudokuProvider>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport './css/style.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}